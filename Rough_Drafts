#Bring In Libraries
library(rvest)
library(plyr)
library(dplyr)


#############################   ROTTEN TOMATOES   ###############################


    #Website to Scrape for WORST MOVIES----
URL_worst <- html("https://editorial.rottentomatoes.com/guide/worst-movies-of-all-time/")

#Attributes----
#Titles
URL_worst%>%
  html_nodes(".article_movie_title a") %>%
  html_text()
#Year
URL_worst%>%
  html_nodes(".start-year") %>%
  html_text()
#Critic Score
URL_worst%>%
  html_nodes(".tMeterScore") %>%
  html_text()
#Director
URL_worst%>%
  html_nodes(".director a:nth-child(2)") %>%
  html_text()
#Actors (Main 1)
URL_worst%>%
  html_nodes(".cast a:nth-child(2)") %>%
  html_text()
#Main2
URL_worst%>%
  html_nodes(".cast a:nth-child(3)") %>%
  html_text()
#Main3
URL_worst%>%
  html_nodes(".cast a:nth-child(4)") %>%
  html_text()
#Main4
URL_worst%>%
  html_nodes(".cast a:nth-child(5)") %>%
  html_text()



# Attributes as Lists ----
listWT <- list(URL_worst%>%
                html_nodes(".article_movie_title a") %>%
                html_text())
listWY <- list(URL_worst%>%
                html_nodes(".start-year") %>%
                html_text())
listWS <- list(URL_worst%>%
                html_nodes(".tMeterScore") %>%
                html_text())
listWD <- list(URL_worst%>%
                html_nodes(".director a:nth-child(2)") %>%
                html_text())
listWA1 <- list(URL_worst%>%
                 html_nodes(".cast a:nth-child(2)") %>%
                 html_text())
listWA2 <- list(URL_worst%>%
                 html_nodes(".cast a:nth-child(3)") %>%
                 html_text())
listWA3 <- list(URL_worst%>%
                 html_nodes(".cast a:nth-child(4)") %>%
                 html_text())
listWA4 <- list(URL_worst%>%
                 html_nodes(".cast a:nth-child(5)") %>%
                 html_text())

#Dataframe of all Lists - WORST MOVIES ----
df_wrt <- do.call(rbind, Map(data.frame, Title=listWT, Year=listWY, Score=listWS, Director=listWD, Actor1=listWA1, Actor2=listWA2, Actor3=listWA3, Actor4=listWA4))


    #Website to Scrape for BEST MOVIES----
URL_best <- html("https://editorial.rottentomatoes.com/guide/100-club-certified-fresh-movies/")

# Lists of Attributes----
listBT <- list(URL_best%>%
                 html_nodes(".article_movie_title a") %>%
                 html_text())
listBY <- list(URL_best%>%
                 html_nodes(".start-year") %>%
                 html_text())
listBS <- list(URL_best%>%
                 html_nodes(".tMeterScore") %>%
                 html_text())
listBD <- list(URL_best%>%
                 html_nodes(".director a:nth-child(2)") %>%
                 html_text())
listBA1 <- list(URL_best%>%
                  html_nodes(".cast a:nth-child(2)") %>%
                  html_text())
listBA2 <- list(URL_best%>%
                  html_nodes(".cast a:nth-child(3)") %>%
                  html_text())
listBA3 <- list(URL_best%>%
                  html_nodes(".cast a:nth-child(4)") %>%
                  html_text())
listBA4 <- list(URL_best%>%
                  html_nodes(".cast a:nth-child(5)") %>%
                  html_text())

#NOTE: Number of elements between lists differ
lengths(listBT)
lengths(listBA1)


# Reordering of lists (so that the three movies with no information on actors are at the end of the list)----

#Turned original lists into data frames
df_BT <- do.call(rbind, Map(data.frame, Titles=listBT))
df_BY <- do.call(rbind, Map(data.frame, Year=listBY))
df_BS <- do.call(rbind, Map(data.frame, Score=listBS))
df_BD <- do.call(rbind, Map(data.frame, Director=listBD))

#Reordered rows in data frames
df_BT <- df_BT$Titles[c(1:15, 17:23, 25:69, 16, 24, 70)]
df_BY <- df_BY$Year[c(1:15, 17:23, 25:69, 16, 24, 70)]
df_BS <- df_BS$Score[c(1:15, 17:23, 25:69, 16, 24, 70)]
df_BD <- df_BD$Director[c(1:15, 17:23, 25:69, 16, 24, 70)]

#Converted data frameS back into listS
listBT_new <- list(df_BT)
listBY_new <- list(df_BY)
listBS_new <- list(df_BS)
listBD_new <- list(df_BD)

#New data frame with new (ordered) lists

df_bstA <- do.call(rbind, Map(data.frame, Title=listBT_new, Year=listBY_new, Score=listBS_new, Director=listBD_new))

# Data frame of Actor Lists

df_bstB <- do.call(rbind, Map(data.frame, Actor1=listBA1, Actor2=listBA2, Actor3=listBA3, Actor4=listBA4))

# Merged and final Data Frame for BEST MOVIES----

df_bst <- merge(data.frame(df_bstA, row.names=NULL), data.frame(df_bstB, row.names=NULL), 
      by = 0, all = TRUE)[-1]

#################################################################################


















##################################   IMDB   ################################## 

#Websites to scrape - WORST MOVIES
URL_bottom <- html("https://www.imdb.com/search/title/?groups=bottom_250&lists=!watchlist&sort=user_rating,asc")
URL_bottom51 <- html("https://www.imdb.com/search/title/?groups=bottom_250&sort=user_rating,asc&start=51&ref_=adv_nxt")
URL_bottom101 <- html("https://www.imdb.com/search/title/?groups=bottom_250&sort=user_rating,asc&start=101&ref_=adv_nxt")
URL_bottom151 <- html("https://www.imdb.com/search/title/?groups=bottom_250&sort=user_rating,asc&start=151&ref_=adv_nxt")
URL_bottom201 <- html("https://www.imdb.com/search/title/?groups=bottom_250&sort=user_rating,asc&start=201&ref_=adv_nxt")


#Attributes ----
#Movie Titles

list01M <- list(URL_bottom%>%
  html_nodes(".lister-item-header a") %>%
  html_text())

list02M <- list(URL_bottom51%>%
                  html_nodes(".lister-item-header a") %>%
                  html_text())

list03M <- list(URL_bottom101%>%
                  html_nodes(".lister-item-header a") %>%
                  html_text())

list04M <- list(URL_bottom151%>%
                  html_nodes(".lister-item-header a") %>%
                  html_text())

list05M <- list(URL_bottom201%>%
                  html_nodes(".lister-item-header a") %>%
                  html_text())

#Year
list01Y <- list(URL_bottom%>%
  html_nodes(".text-muted.unbold") %>%
  html_text())

list02Y <- list(URL_bottom51%>%
                  html_nodes(".text-muted.unbold") %>%
                  html_text())

list03Y <- list(URL_bottom101%>%
                  html_nodes(".text-muted.unbold") %>%
                  html_text())

list04Y <- list(URL_bottom151%>%
                  html_nodes(".text-muted.unbold") %>%
                  html_text())

list05Y <- list(URL_bottom201%>%
                  html_nodes(".text-muted.unbold") %>%
                  html_text())


#Critic Score

list01S <- list(URL_bottom%>%
  html_nodes(".ratings-imdb-rating strong") %>%
  html_text())

list02S <- list(URL_bottom51%>%
                  html_nodes(".ratings-imdb-rating strong") %>%
                  html_text())

list03S <- list(URL_bottom101%>%
                  html_nodes(".ratings-imdb-rating strong") %>%
                  html_text())

list04S <- list(URL_bottom151%>%
                  html_nodes(".ratings-imdb-rating strong") %>%
                  html_text())

list05S <- list(URL_bottom201%>%
                  html_nodes(".ratings-imdb-rating strong") %>%
                  html_text())

#Age Restriction Rating
list01A <- list(URL_bottom%>%
  html_nodes(".certificate") %>%
  html_text())



list02A <- list(URL_bottom51%>%
                  html_nodes(".certificate") %>%
                  html_text())










list03A <- list(URL_bottom101%>%
                  html_nodes(".certificate") %>%
                  html_text())



list04A <- list(URL_bottom151%>%
                  html_nodes(".certificate") %>%
                  html_text())





#Turned original lists into data frames
df_04A <- do.call(rbind, Map(data.frame, Age_Restrictions=list04A))


#Reordered rows in data frames
df_04A <- df_04A$Age_Restrictions[c(1:11, 13:49)]


#Converted data frameS back into listS
list04A_New <- list(df_04A)




list05A <- list(URL_bottom201%>%
                  html_nodes(".certificate") %>%
                  html_text())

#Runtime
list01R <- list(URL_bottom%>%
  html_nodes(".runtime") %>%
  html_text())

list02R <- list(URL_bottom51%>%
                  html_nodes(".runtime") %>%
                  html_text())

list03R <- list(URL_bottom101%>%
                  html_nodes(".runtime") %>%
                  html_text())

list04R <- list(URL_bottom151%>%
                  html_nodes(".runtime") %>%
                  html_text())

list05R <- list(URL_bottom201%>%
                  html_nodes(".runtime") %>%
                  html_text())


#Votes
list01V <- list(URL_bottom%>%
  html_nodes(".sort-num_votes-visible span:nth-child(2)") %>%
  html_text())

list02V <- list(URL_bottom51%>%
                  html_nodes(".sort-num_votes-visible span:nth-child(2)") %>%
                  html_text())

list03V <- list(URL_bottom101%>%
                  html_nodes(".sort-num_votes-visible span:nth-child(2)") %>%
                  html_text())

list04V <- list(URL_bottom151%>%
                  html_nodes(".sort-num_votes-visible span:nth-child(2)") %>%
                  html_text())

list05V <- list(URL_bottom201%>%
                  html_nodes(".sort-num_votes-visible span:nth-child(2)") %>%
                  html_text())

#Director
list01D <- list(URL_bottom%>%
  html_nodes("p:nth-child(5) a:nth-child(1)") %>%
  html_text())

list02D <- list(URL_bottom51%>%
                  html_nodes("p:nth-child(5) a:nth-child(1)") %>%
                  html_text())

list03D <- list(URL_bottom101%>%
                  html_nodes("p:nth-child(5) a:nth-child(1)") %>%
                  html_text())

list04D <- list(URL_bottom151%>%
                  html_nodes("p:nth-child(5) a:nth-child(1)") %>%
                  html_text())

list05D <- list(URL_bottom201%>%
                  html_nodes("p:nth-child(5) a:nth-child(1)") %>%
                  html_text())

########### Vector Cleaning ########## ----

#Vector Assignments

#Genre
G <- URL_bottom%>%
  html_nodes(".genre") %>%
  html_text()
G_2 <- URL_bottom51%>%
  html_nodes(".genre") %>%
  html_text()
G_3 <- URL_bottom101%>%
  html_nodes(".genre") %>%
  html_text()
G_4 <- URL_bottom151%>%
  html_nodes(".genre") %>%
  html_text()
G_5 <- URL_bottom201%>%
  html_nodes(".genre") %>%
  html_text()

#Trim function which uses regular expressions to clean white space
trim <- function( x ) {
  gsub("(^[[:space:]]+|[[:space:]]+$)", "", x)
}

G1 <- trim(G)
G2 <- trim(G_2)
G3 <- trim(G_3)
G4 <- trim(G_4)
G5 <- trim(G_5)



#Actors 
#Main 1
AM1 <- URL_bottom%>%
  html_nodes(":nth-child(48) a:nth-child(4) , :nth-child(34) a:nth-child(4), :nth-child(33) a:nth-child(4), :nth-child(23) a:nth-child(4), 
             :nth-child(21) a:nth-child(4), #main :nth-child(10) a:nth-child(4), #main :nth-child(5) .lister-item-content a:nth-child(4), 
             :nth-child(50) a:nth-child(4), .lister-item-content a:nth-child(3)") %>%
  html_text()

AM1B <- URL_bottom51%>%
  html_nodes(":nth-child(48) a:nth-child(4) , :nth-child(34) a:nth-child(4), :nth-child(33) a:nth-child(4), :nth-child(23) a:nth-child(4), 
             :nth-child(21) a:nth-child(4), #main :nth-child(10) a:nth-child(4), #main :nth-child(5) .lister-item-content a:nth-child(4), 
             :nth-child(50) a:nth-child(4), .lister-item-content a:nth-child(3)") %>%
  html_text()

AM1C <- URL_bottom101%>%
  html_nodes(":nth-child(48) a:nth-child(4) , :nth-child(34) a:nth-child(4), :nth-child(33) a:nth-child(4), :nth-child(23) a:nth-child(4), 
             :nth-child(21) a:nth-child(4), #main :nth-child(10) a:nth-child(4), #main :nth-child(5) .lister-item-content a:nth-child(4), 
             :nth-child(50) a:nth-child(4), .lister-item-content a:nth-child(3)") %>%
  html_text()

AM1D <- URL_bottom151%>%
  html_nodes(":nth-child(48) a:nth-child(4) , :nth-child(34) a:nth-child(4), :nth-child(33) a:nth-child(4), :nth-child(23) a:nth-child(4), 
             :nth-child(21) a:nth-child(4), #main :nth-child(10) a:nth-child(4), #main :nth-child(5) .lister-item-content a:nth-child(4), 
             :nth-child(50) a:nth-child(4), .lister-item-content a:nth-child(3)") %>%
  html_text()

AM1E <- URL_bottom201%>%
  html_nodes(":nth-child(48) a:nth-child(4) , :nth-child(34) a:nth-child(4), :nth-child(33) a:nth-child(4), :nth-child(23) a:nth-child(4), 
             :nth-child(21) a:nth-child(4), #main :nth-child(10) a:nth-child(4), #main :nth-child(5) .lister-item-content a:nth-child(4), 
             :nth-child(50) a:nth-child(4), .lister-item-content a:nth-child(3)") %>%
  html_text()

#Main2
AM2 <- URL_bottom%>%
  html_nodes("a:nth-child(4)") %>%
  html_text()

AM2B <- URL_bottom51%>%
  html_nodes("a:nth-child(4)") %>%
  html_text()


AM2C <- URL_bottom101%>%
  html_nodes("a:nth-child(4)") %>%
  html_text()


AM2D <- URL_bottom151%>%
  html_nodes("a:nth-child(4)") %>%
  html_text()


AM2E <- URL_bottom201%>%
  html_nodes("a:nth-child(4)") %>%
  html_text()


#Main3
AM3 <- URL_bottom%>%
  html_nodes(".lister-item-content a:nth-child(5)") %>%
  html_text()

AM3B <- URL_bottom51%>%
  html_nodes(".lister-item-content a:nth-child(5)") %>%
  html_text()

AM3C <- URL_bottom101%>%
  html_nodes(".lister-item-content a:nth-child(5)") %>%
  html_text()

AM3D <- URL_bottom151%>%
  html_nodes(".lister-item-content a:nth-child(5)") %>%
  html_text()

AM3E <- URL_bottom201%>%
  html_nodes(".lister-item-content a:nth-child(5)") %>%
  html_text()

#Main4
AM4 <- URL_bottom%>%
  html_nodes("a:nth-child(6)") %>%
  html_text()

AM4B <- URL_bottom51%>%
  html_nodes("a:nth-child(6)") %>%
  html_text()

AM4C <- URL_bottom101%>%
  html_nodes("a:nth-child(6)") %>%
  html_text()

AM4D <- URL_bottom151%>%
  html_nodes("a:nth-child(6)") %>%
  html_text()

AM4E <- URL_bottom201%>%
  html_nodes("a:nth-child(6)") %>%
  html_text()

#Vector Cleaning

AM11 <- AM1[AM1 %in% "3" == FALSE]
AM111 <- AM11[AM11 %in% "4" == FALSE]

AM22 <- AM2[AM2 %in% "4" == FALSE]
AM222 <- AM22[AM22 %in% "Most Popular Movies" == FALSE]
AM2222 <- AM222[AM222 %in% "Most Popular Shows" == FALSE]
AM22222 <- AM2222[AM2222 %in% "IMDb Originals" == FALSE]
AM222222 <- AM22222[AM22222 %in% "Golden Globes" == FALSE]
AM2222222 <- AM222222[AM222222 %in% "Celebrity News" == FALSE]
AM22222222 <- AM2222222[AM2222222 %in% "Celebs" == FALSE] #EIGHT 2's

AM33 <- AM3[AM3 %in% "5" == FALSE]

AM44 <- AM4[AM4 %in% "6" == FALSE]
AM444 <- AM44[AM44 %in% "Top Box Office" == FALSE]
AM4444 <- AM444[AM444 %in% "TV News" == FALSE]
AM44444 <- AM4444[AM4444 %in% "IMDb Podcasts" == FALSE]
AM444444 <- AM44444[AM44444 %in% "Women's History Month" == FALSE]
AM4444444 <- AM444444[AM444444 %in% "Keywords" == FALSE] #SIX 4's



AM11B <- AM1B[AM1B %in% "3" == FALSE]
AM111B <- AM11B[AM11B %in% "4" == FALSE]

AM22B <- AM2B[AM2B %in% "4" == FALSE]
AM222B <- AM22B[AM22B %in% "Most Popular Movies" == FALSE]
AM2222B <- AM222B[AM222B %in% "Most Popular Shows" == FALSE]
AM22222B <- AM2222B[AM2222B %in% "IMDb Originals" == FALSE]
AM222222B <- AM22222B[AM22222B %in% "Golden Globes" == FALSE]
AM2222222B <- AM222222B[AM222222B %in% "Celebrity News" == FALSE]
AM22222222B <- AM2222222B[AM2222222B %in% "Celebs" == FALSE] #EIGHT 2's

AM33B <- AM3B[AM3B %in% "5" == FALSE]

AM44B <- AM4B[AM4B %in% "6" == FALSE]
AM444B <- AM44B[AM44B %in% "Top Box Office" == FALSE]
AM4444B <- AM444B[AM444B %in% "TV News" == FALSE]
AM44444B <- AM4444B[AM4444B %in% "IMDb Podcasts" == FALSE]
AM444444B <- AM44444B[AM44444B %in% "Women's History Month" == FALSE]
AM4444444B <- AM444444B[AM444444B %in% "Keywords" == FALSE] #SIX 4's



AM11C <- AM1C[AM1C %in% "3" == FALSE]
AM111C <- AM11C[AM11C %in% "4" == FALSE]

AM22C <- AM2C[AM2C %in% "4" == FALSE]
AM222C <- AM22C[AM22C %in% "Most Popular Movies" == FALSE]
AM2222C <- AM222C[AM222C %in% "Most Popular Shows" == FALSE]
AM22222C <- AM2222C[AM2222C %in% "IMDb Originals" == FALSE]
AM222222C <- AM22222C[AM22222C %in% "Golden Globes" == FALSE]
AM2222222C <- AM222222C[AM222222C %in% "Celebrity News" == FALSE]
AM22222222C <- AM2222222C[AM2222222C %in% "Celebs" == FALSE] #EIGHT 2's

AM33C <- AM3C[AM3C %in% "5" == FALSE]

AM44C <- AM4C[AM4C %in% "6" == FALSE]
AM444C <- AM44C[AM44C %in% "Top Box Office" == FALSE]
AM4444C <- AM444C[AM444C %in% "TV News" == FALSE]
AM44444C <- AM4444C[AM4444C %in% "IMDb Podcasts" == FALSE]
AM444444C <- AM44444C[AM44444C %in% "Women's History Month" == FALSE]
AM4444444C <- AM444444C[AM444444C %in% "Keywords" == FALSE] #SIX 4's


AM11D <- AM1[AM1 %in% "3" == FALSE]
AM111D <- AM11[AM11 %in% "4" == FALSE]

AM22D <- AM2D[AM2D %in% "4" == FALSE]
AM222D <- AM22D[AM22D %in% "Most Popular Movies" == FALSE]
AM2222D <- AM222D[AM222D %in% "Most Popular Shows" == FALSE]
AM22222D <- AM2222D[AM2222D %in% "IMDb Originals" == FALSE]
AM222222D <- AM22222D[AM22222D %in% "Golden Globes" == FALSE]
AM2222222D <- AM222222D[AM222222D %in% "Celebrity News" == FALSE]
AM22222222D <- AM2222222D[AM2222222D %in% "Celebs" == FALSE] #EIGHT 2's

AM33D <- AM3D[AM3D %in% "5" == FALSE]

AM44D <- AM4D[AM4D %in% "6" == FALSE]
AM444D <- AM44D[AM44D %in% "Top Box Office" == FALSE]
AM4444D <- AM444D[AM444D %in% "TV News" == FALSE]
AM44444D <- AM4444D[AM4444D %in% "IMDb Podcasts" == FALSE]
AM444444D <- AM44444D[AM44444D %in% "Women's History Month" == FALSE]
AM4444444D <- AM444444D[AM444444D %in% "Keywords" == FALSE] #SIX 4's




AM11E <- AM1E[AM1E %in% "3" == FALSE]
AM111E <- AM11E[AM11E %in% "4" == FALSE]

AM22E <- AM2E[AM2E %in% "4" == FALSE]
AM222E <- AM22E[AM22E %in% "Most Popular Movies" == FALSE]
AM2222E <- AM222E[AM222E %in% "Most Popular Shows" == FALSE]
AM22222E <- AM2222E[AM2222E %in% "IMDb Originals" == FALSE]
AM222222E <- AM22222E[AM22222E %in% "Golden Globes" == FALSE]
AM2222222E <- AM222222E[AM222222E %in% "Celebrity News" == FALSE]
AM22222222E <- AM2222222E[AM2222222E %in% "Celebs" == FALSE] #EIGHT 2's

AM33E <- AM3E[AM3E %in% "5" == FALSE]

AM44E <- AM4E[AM4E %in% "6" == FALSE]
AM444E <- AM44E[AM44E %in% "Top Box Office" == FALSE]
AM4444E <- AM444E[AM444E %in% "TV News" == FALSE]
AM44444E <- AM4444E[AM4444E %in% "IMDb Podcasts" == FALSE]
AM444444E <- AM44444E[AM44444E %in% "Women's History Month" == FALSE]
AM4444444E <- AM444444E[AM444444E %in% "Keywords" == FALSE] #SIX 4's



# Vectors into Lists
list01G <- list(G1)
list01AM1 <- list(AM111) 
list01AM2 <- list(AM22222222)
list01AM3 <- list(AM33) 
list01AM4 <- list(AM4444444) 

list02G <- list(G2)
list02AM1 <- list(AM111B) 
list02AM2 <- list(AM22222222B)
list02AM3 <- list(AM33B) 
list02AM4 <- list(AM4444444B) 

list03G <- list(G3)
list03AM1 <- list(AM111C) 
list03AM2 <- list(AM22222222C)
list03AM3 <- list(AM33C) 
list03AM4 <- list(AM4444444C) 

list04G <- list(G4)
list04AM1 <- list(AM111D) 
list04AM2 <- list(AM22222222D)
list04AM3 <- list(AM33D) 
list04AM4 <- list(AM4444444D) 

list05G <- list(G5)
list05AM1 <- list(AM111E) 
list05AM2 <- list(AM22222222E)
list05AM3 <- list(AM33E) 
list05AM4 <- list(AM4444444E) 




# Data Frame for WORST MOVIES IMDB

df_bottom <- do.call(rbind, Map(data.frame, Title=list01M, Year=list01Y, Score=list01S, Director=list01D, Actor1=list01AM1, Actor2=list01AM2, Actor3=list01AM3, 
                                Actor4=list01AM4, Runtime=list01R, Genre=list01G, Votes=list01V))


df_bottom151 <- do.call(rbind, Map(data.frame, Title=list04M, Year=list04Y, Score=list04S, Director=list04D, Actor1=list04AM1, Actor2=list04AM2, Actor3=list04AM3, 
                                Actor4=list04AM4,  Runtime=list04R, Genre=list04G, Votes=list04V))




#df_bottom51 <- do.call(rbind, Map(data.frame, Title=list02M, Year=list02Y, Score=list02S, Director=list02D, Actor1=list02AM1, Actor2=list02AM2, Actor3=list02AM3, 
#                                 Actor4=list02AM4, Runtime=list02R, Genre=list02G, Votes=list02V))
#df_bottom101 <- do.call(rbind, Map(data.frame, Title=list03M, Year=list03Y, Score=list03S, Director=list03D, Actor1=list03AM1, Actor2=list03AM2, Actor3=list03AM3, 
#                                   Actor4=list03AM4,  Runtime=list03R, Genre=list03G, Votes=list03V))

#df_bottom201 <- do.call(rbind, Map(data.frame, Title=list05M, Year=list05Y, Score=list05S, Director=list05D, Actor1=list05AM1, Actor2=list05AM2, Actor3=list05AM3, 
#                                  Actor4=list05AM4,  Runtime=list05R, Genre=list05G, Votes=list05V))



# Final Merged Data Frame for WORST MOVIES


total <- rbind(data frameA, data frameB)




Age_Restriction=list01A
Age_Restriction=list02A,
Age_Restriction=list03A,
Age_Restriction=list04A,
Age_Restriction=list05A,

#Websites to scrape - BEST MOVIES ----
URL_top <- html("https://www.imdb.com/search/title/?groups=top_250&sort=user_rating")
URL_top51 <- html("https://www.imdb.com/search/title/?groups=top_250&sort=user_rating,desc&start=51&ref_=adv_nxt")
URL_top101 <- html("https://www.imdb.com/search/title/?groups=top_250&sort=user_rating,desc&start=101&ref_=adv_nxt")
URL_top151 <- html("https://www.imdb.com/search/title/?groups=top_250&sort=user_rating,desc&start=151&ref_=adv_nxt")
URL_top201 <- html("https://www.imdb.com/search/title/?groups=top_250&sort=user_rating,desc&start=201&ref_=adv_nxt")

